<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.travelzen.framework.retry.dao.mapper.gen.RetryTaskMapper" >
  <resultMap id="BaseResultMap" type="com.travelzen.framework.retry.dao.po.RetryTask" >
    <id column="task_type" property="taskType" jdbcType="VARCHAR" />
    <id column="task_id" property="taskId" jdbcType="VARCHAR" />
    <result column="retry_policy" property="retryPolicy" jdbcType="VARCHAR" />
    <result column="backoff_policy" property="backoffPolicy" jdbcType="VARCHAR" />
    <result column="max_attempts" property="maxAttempts" jdbcType="DECIMAL" />
    <result column="current_attempts" property="currentAttempts" jdbcType="DECIMAL" />
    <result column="task_deadline" property="taskDeadline" jdbcType="TIMESTAMP" />
    <result column="fixed_backoff_period" property="fixedBackoffPeriod" jdbcType="DECIMAL" />
    <result column="state" property="state" jdbcType="VARCHAR" />
    <result column="message" property="message" jdbcType="VARCHAR" />
    <result column="data" property="data" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="business_transaction_version" property="businessTransactionVersion" jdbcType="VARCHAR" />
    <result column="process_timeout" property="processTimeout" jdbcType="DECIMAL" />
    <result column="finished" property="finished" jdbcType="BIT" />
    <result column="use_isolated_thread_pool" property="useIsolatedThreadPool" jdbcType="BIT" />
    <result column="thread_pool_size" property="threadPoolSize" jdbcType="DECIMAL" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    task_type, task_id, retry_policy, backoff_policy, max_attempts, current_attempts, 
    task_deadline, fixed_backoff_period, state, message, data, create_date, update_date, 
    business_transaction_version, process_timeout, finished, use_isolated_thread_pool, 
    thread_pool_size, start_time, end_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.travelzen.framework.retry.dao.po.RetryTaskExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from common_retry_task
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
      <if test="limitStart >= 0" >
        limit ${limitStart} , ${limitEnd}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.travelzen.framework.retry.dao.po.RetryTaskKey" >
    select 
    <include refid="Base_Column_List" />
    from common_retry_task
    where task_type = #{taskType,jdbcType=VARCHAR}
      and task_id = #{taskId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.travelzen.framework.retry.dao.po.RetryTaskKey" >
    delete from common_retry_task
    where task_type = #{taskType,jdbcType=VARCHAR}
      and task_id = #{taskId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.travelzen.framework.retry.dao.po.RetryTaskExample" >
    delete from common_retry_task
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.travelzen.framework.retry.dao.po.RetryTask" >
    insert into common_retry_task (task_type, task_id, retry_policy, 
      backoff_policy, max_attempts, current_attempts, 
      task_deadline, fixed_backoff_period, state, 
      message, data, create_date, 
      update_date, business_transaction_version, 
      process_timeout, finished, use_isolated_thread_pool, 
      thread_pool_size, start_time, end_time
      )
    values (#{taskType,jdbcType=VARCHAR}, #{taskId,jdbcType=VARCHAR}, #{retryPolicy,jdbcType=VARCHAR}, 
      #{backoffPolicy,jdbcType=VARCHAR}, #{maxAttempts,jdbcType=DECIMAL}, #{currentAttempts,jdbcType=DECIMAL}, 
      #{taskDeadline,jdbcType=TIMESTAMP}, #{fixedBackoffPeriod,jdbcType=DECIMAL}, #{state,jdbcType=VARCHAR}, 
      #{message,jdbcType=VARCHAR}, #{data,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{businessTransactionVersion,jdbcType=VARCHAR}, 
      #{processTimeout,jdbcType=DECIMAL}, #{finished,jdbcType=BIT}, #{useIsolatedThreadPool,jdbcType=BIT}, 
      #{threadPoolSize,jdbcType=DECIMAL}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.travelzen.framework.retry.dao.po.RetryTask" >
    insert into common_retry_task
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="taskType != null" >
        task_type,
      </if>
      <if test="taskId != null" >
        task_id,
      </if>
      <if test="retryPolicy != null" >
        retry_policy,
      </if>
      <if test="backoffPolicy != null" >
        backoff_policy,
      </if>
      <if test="maxAttempts != null" >
        max_attempts,
      </if>
      <if test="currentAttempts != null" >
        current_attempts,
      </if>
      <if test="taskDeadline != null" >
        task_deadline,
      </if>
      <if test="fixedBackoffPeriod != null" >
        fixed_backoff_period,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="message != null" >
        message,
      </if>
      <if test="data != null" >
        data,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="businessTransactionVersion != null" >
        business_transaction_version,
      </if>
      <if test="processTimeout != null" >
        process_timeout,
      </if>
      <if test="finished != null" >
        finished,
      </if>
      <if test="useIsolatedThreadPool != null" >
        use_isolated_thread_pool,
      </if>
      <if test="threadPoolSize != null" >
        thread_pool_size,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="taskType != null" >
        #{taskType,jdbcType=VARCHAR},
      </if>
      <if test="taskId != null" >
        #{taskId,jdbcType=VARCHAR},
      </if>
      <if test="retryPolicy != null" >
        #{retryPolicy,jdbcType=VARCHAR},
      </if>
      <if test="backoffPolicy != null" >
        #{backoffPolicy,jdbcType=VARCHAR},
      </if>
      <if test="maxAttempts != null" >
        #{maxAttempts,jdbcType=DECIMAL},
      </if>
      <if test="currentAttempts != null" >
        #{currentAttempts,jdbcType=DECIMAL},
      </if>
      <if test="taskDeadline != null" >
        #{taskDeadline,jdbcType=TIMESTAMP},
      </if>
      <if test="fixedBackoffPeriod != null" >
        #{fixedBackoffPeriod,jdbcType=DECIMAL},
      </if>
      <if test="state != null" >
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="data != null" >
        #{data,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="businessTransactionVersion != null" >
        #{businessTransactionVersion,jdbcType=VARCHAR},
      </if>
      <if test="processTimeout != null" >
        #{processTimeout,jdbcType=DECIMAL},
      </if>
      <if test="finished != null" >
        #{finished,jdbcType=BIT},
      </if>
      <if test="useIsolatedThreadPool != null" >
        #{useIsolatedThreadPool,jdbcType=BIT},
      </if>
      <if test="threadPoolSize != null" >
        #{threadPoolSize,jdbcType=DECIMAL},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.travelzen.framework.retry.dao.po.RetryTaskExample" resultType="java.lang.Integer" >
    select count(*) from common_retry_task
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update common_retry_task
    <set >
      <if test="record.taskType != null" >
        task_type = #{record.taskType,jdbcType=VARCHAR},
      </if>
      <if test="record.taskId != null" >
        task_id = #{record.taskId,jdbcType=VARCHAR},
      </if>
      <if test="record.retryPolicy != null" >
        retry_policy = #{record.retryPolicy,jdbcType=VARCHAR},
      </if>
      <if test="record.backoffPolicy != null" >
        backoff_policy = #{record.backoffPolicy,jdbcType=VARCHAR},
      </if>
      <if test="record.maxAttempts != null" >
        max_attempts = #{record.maxAttempts,jdbcType=DECIMAL},
      </if>
      <if test="record.currentAttempts != null" >
        current_attempts = #{record.currentAttempts,jdbcType=DECIMAL},
      </if>
      <if test="record.taskDeadline != null" >
        task_deadline = #{record.taskDeadline,jdbcType=TIMESTAMP},
      </if>
      <if test="record.fixedBackoffPeriod != null" >
        fixed_backoff_period = #{record.fixedBackoffPeriod,jdbcType=DECIMAL},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.message != null" >
        message = #{record.message,jdbcType=VARCHAR},
      </if>
      <if test="record.data != null" >
        data = #{record.data,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null" >
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.businessTransactionVersion != null" >
        business_transaction_version = #{record.businessTransactionVersion,jdbcType=VARCHAR},
      </if>
      <if test="record.processTimeout != null" >
        process_timeout = #{record.processTimeout,jdbcType=DECIMAL},
      </if>
      <if test="record.finished != null" >
        finished = #{record.finished,jdbcType=BIT},
      </if>
      <if test="record.useIsolatedThreadPool != null" >
        use_isolated_thread_pool = #{record.useIsolatedThreadPool,jdbcType=BIT},
      </if>
      <if test="record.threadPoolSize != null" >
        thread_pool_size = #{record.threadPoolSize,jdbcType=DECIMAL},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update common_retry_task
    set task_type = #{record.taskType,jdbcType=VARCHAR},
      task_id = #{record.taskId,jdbcType=VARCHAR},
      retry_policy = #{record.retryPolicy,jdbcType=VARCHAR},
      backoff_policy = #{record.backoffPolicy,jdbcType=VARCHAR},
      max_attempts = #{record.maxAttempts,jdbcType=DECIMAL},
      current_attempts = #{record.currentAttempts,jdbcType=DECIMAL},
      task_deadline = #{record.taskDeadline,jdbcType=TIMESTAMP},
      fixed_backoff_period = #{record.fixedBackoffPeriod,jdbcType=DECIMAL},
      state = #{record.state,jdbcType=VARCHAR},
      message = #{record.message,jdbcType=VARCHAR},
      data = #{record.data,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      business_transaction_version = #{record.businessTransactionVersion,jdbcType=VARCHAR},
      process_timeout = #{record.processTimeout,jdbcType=DECIMAL},
      finished = #{record.finished,jdbcType=BIT},
      use_isolated_thread_pool = #{record.useIsolatedThreadPool,jdbcType=BIT},
      thread_pool_size = #{record.threadPoolSize,jdbcType=DECIMAL},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.travelzen.framework.retry.dao.po.RetryTask" >
    update common_retry_task
    <set >
      <if test="retryPolicy != null" >
        retry_policy = #{retryPolicy,jdbcType=VARCHAR},
      </if>
      <if test="backoffPolicy != null" >
        backoff_policy = #{backoffPolicy,jdbcType=VARCHAR},
      </if>
      <if test="maxAttempts != null" >
        max_attempts = #{maxAttempts,jdbcType=DECIMAL},
      </if>
      <if test="currentAttempts != null" >
        current_attempts = #{currentAttempts,jdbcType=DECIMAL},
      </if>
      <if test="taskDeadline != null" >
        task_deadline = #{taskDeadline,jdbcType=TIMESTAMP},
      </if>
      <if test="fixedBackoffPeriod != null" >
        fixed_backoff_period = #{fixedBackoffPeriod,jdbcType=DECIMAL},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        message = #{message,jdbcType=VARCHAR},
      </if>
      <if test="data != null" >
        data = #{data,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="businessTransactionVersion != null" >
        business_transaction_version = #{businessTransactionVersion,jdbcType=VARCHAR},
      </if>
      <if test="processTimeout != null" >
        process_timeout = #{processTimeout,jdbcType=DECIMAL},
      </if>
      <if test="finished != null" >
        finished = #{finished,jdbcType=BIT},
      </if>
      <if test="useIsolatedThreadPool != null" >
        use_isolated_thread_pool = #{useIsolatedThreadPool,jdbcType=BIT},
      </if>
      <if test="threadPoolSize != null" >
        thread_pool_size = #{threadPoolSize,jdbcType=DECIMAL},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where task_type = #{taskType,jdbcType=VARCHAR}
      and task_id = #{taskId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.travelzen.framework.retry.dao.po.RetryTask" >
    update common_retry_task
    set retry_policy = #{retryPolicy,jdbcType=VARCHAR},
      backoff_policy = #{backoffPolicy,jdbcType=VARCHAR},
      max_attempts = #{maxAttempts,jdbcType=DECIMAL},
      current_attempts = #{currentAttempts,jdbcType=DECIMAL},
      task_deadline = #{taskDeadline,jdbcType=TIMESTAMP},
      fixed_backoff_period = #{fixedBackoffPeriod,jdbcType=DECIMAL},
      state = #{state,jdbcType=VARCHAR},
      message = #{message,jdbcType=VARCHAR},
      data = #{data,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      business_transaction_version = #{businessTransactionVersion,jdbcType=VARCHAR},
      process_timeout = #{processTimeout,jdbcType=DECIMAL},
      finished = #{finished,jdbcType=BIT},
      use_isolated_thread_pool = #{useIsolatedThreadPool,jdbcType=BIT},
      thread_pool_size = #{threadPoolSize,jdbcType=DECIMAL},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP}
    where task_type = #{taskType,jdbcType=VARCHAR}
      and task_id = #{taskId,jdbcType=VARCHAR}
  </update>
</mapper>